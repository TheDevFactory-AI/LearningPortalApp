/**
 * Generated by orval v6.22.1 üç∫
 * Do not edit manually.
 * BackendEntryPoint
 * API for managing users, tracks, and projects for a code evaluation platform.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Project,
  Track,
  User
} from '../model'
import { customClient } from '../../mutator/custom-client';
import type { ErrorType, BodyType } from '../../mutator/custom-client';


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


/**
 * @summary Get a list of all users
 */
export const getUsers = (
    
 options?: SecondParameter<typeof customClient>,signal?: AbortSignal
) => {
      
      
      return customClient<User[]>(
      {url: `/users`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUsersQueryKey = () => {
    return [`/users`] as const;
    }

    
export const getGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUsers>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof customClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = ErrorType<void>

/**
 * @summary Get a list of all users
 */
export const useGetUsers = <TData = Awaited<ReturnType<typeof getUsers>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof customClient>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new user
 */
export const postUsers = (
    user: BodyType<User>,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<User>(
      {url: `/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      options);
    }
  


export const getPostUsersMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: BodyType<User>}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: BodyType<User>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsers>>, {data: BodyType<User>}> = (props) => {
          const {data} = props ?? {};

          return  postUsers(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
    export type PostUsersMutationBody = BodyType<User>
    export type PostUsersMutationError = ErrorType<void>

    /**
 * @summary Create a new user
 */
export const usePostUsers = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: BodyType<User>}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getPostUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a user by ID
 */
export const getUsersUserId = (
    userId: string,
 options?: SecondParameter<typeof customClient>,signal?: AbortSignal
) => {
      
      
      return customClient<User>(
      {url: `/users/${userId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUsersUserIdQueryKey = (userId: string,) => {
    return [`/users/${userId}`] as const;
    }

    
export const getGetUsersUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = ErrorType<void>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>>, request?: SecondParameter<typeof customClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserId>>> = ({ signal }) => getUsersUserId(userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserId>>>
export type GetUsersUserIdQueryError = ErrorType<void>

/**
 * @summary Get a user by ID
 */
export const useGetUsersUserId = <TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = ErrorType<void>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>>, request?: SecondParameter<typeof customClient>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a user by ID
 */
export const putUsersUserId = (
    userId: string,
    user: BodyType<User>,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<void>(
      {url: `/users/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      options);
    }
  


export const getPutUsersUserIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: string;data: BodyType<User>}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: string;data: BodyType<User>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsersUserId>>, {userId: string;data: BodyType<User>}> = (props) => {
          const {userId,data} = props ?? {};

          return  putUsersUserId(userId,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof putUsersUserId>>>
    export type PutUsersUserIdMutationBody = BodyType<User>
    export type PutUsersUserIdMutationError = ErrorType<unknown>

    /**
 * @summary Update a user by ID
 */
export const usePutUsersUserId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: string;data: BodyType<User>}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getPutUsersUserIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a user by ID
 */
export const deleteUsersUserId = (
    userId: string,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<void>(
      {url: `/users/${userId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteUsersUserIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserId>>, TError,{userId: string}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserId>>, TError,{userId: string}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUsersUserId>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  deleteUsersUserId(userId,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersUserId>>>
    
    export type DeleteUsersUserIdMutationError = ErrorType<unknown>

    /**
 * @summary Delete a user by ID
 */
export const useDeleteUsersUserId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserId>>, TError,{userId: string}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getDeleteUsersUserIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a list of all tracks
 */
export const getTracks = (
    
 options?: SecondParameter<typeof customClient>,signal?: AbortSignal
) => {
      
      
      return customClient<Track[]>(
      {url: `/tracks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTracksQueryKey = () => {
    return [`/tracks`] as const;
    }

    
export const getGetTracksQueryOptions = <TData = Awaited<ReturnType<typeof getTracks>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTracks>>, TError, TData>>, request?: SecondParameter<typeof customClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTracksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTracks>>> = ({ signal }) => getTracks(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTracks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getTracks>>>
export type GetTracksQueryError = ErrorType<void>

/**
 * @summary Get a list of all tracks
 */
export const useGetTracks = <TData = Awaited<ReturnType<typeof getTracks>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTracks>>, TError, TData>>, request?: SecondParameter<typeof customClient>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTracksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new track
 */
export const postTracks = (
    track: BodyType<Track>,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<Track>(
      {url: `/tracks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: track
    },
      options);
    }
  


export const getPostTracksMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTracks>>, TError,{data: BodyType<Track>}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postTracks>>, TError,{data: BodyType<Track>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTracks>>, {data: BodyType<Track>}> = (props) => {
          const {data} = props ?? {};

          return  postTracks(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostTracksMutationResult = NonNullable<Awaited<ReturnType<typeof postTracks>>>
    export type PostTracksMutationBody = BodyType<Track>
    export type PostTracksMutationError = ErrorType<void>

    /**
 * @summary Create a new track
 */
export const usePostTracks = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTracks>>, TError,{data: BodyType<Track>}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getPostTracksMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a track by ID
 */
export const getTracksTrackId = (
    trackId: string,
 options?: SecondParameter<typeof customClient>,signal?: AbortSignal
) => {
      
      
      return customClient<Track>(
      {url: `/tracks/${trackId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTracksTrackIdQueryKey = (trackId: string,) => {
    return [`/tracks/${trackId}`] as const;
    }

    
export const getGetTracksTrackIdQueryOptions = <TData = Awaited<ReturnType<typeof getTracksTrackId>>, TError = ErrorType<void>>(trackId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTracksTrackId>>, TError, TData>>, request?: SecondParameter<typeof customClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTracksTrackIdQueryKey(trackId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTracksTrackId>>> = ({ signal }) => getTracksTrackId(trackId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(trackId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTracksTrackId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTracksTrackIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTracksTrackId>>>
export type GetTracksTrackIdQueryError = ErrorType<void>

/**
 * @summary Get a track by ID
 */
export const useGetTracksTrackId = <TData = Awaited<ReturnType<typeof getTracksTrackId>>, TError = ErrorType<void>>(
 trackId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTracksTrackId>>, TError, TData>>, request?: SecondParameter<typeof customClient>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTracksTrackIdQueryOptions(trackId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a track by ID
 */
export const putTracksTrackId = (
    trackId: string,
    track: BodyType<Track>,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<Track>(
      {url: `/tracks/${trackId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: track
    },
      options);
    }
  


export const getPutTracksTrackIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTracksTrackId>>, TError,{trackId: string;data: BodyType<Track>}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putTracksTrackId>>, TError,{trackId: string;data: BodyType<Track>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTracksTrackId>>, {trackId: string;data: BodyType<Track>}> = (props) => {
          const {trackId,data} = props ?? {};

          return  putTracksTrackId(trackId,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutTracksTrackIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTracksTrackId>>>
    export type PutTracksTrackIdMutationBody = BodyType<Track>
    export type PutTracksTrackIdMutationError = ErrorType<void>

    /**
 * @summary Update a track by ID
 */
export const usePutTracksTrackId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTracksTrackId>>, TError,{trackId: string;data: BodyType<Track>}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getPutTracksTrackIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a track by ID
 */
export const deleteTracksTrackId = (
    trackId: string,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<void>(
      {url: `/tracks/${trackId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTracksTrackIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTracksTrackId>>, TError,{trackId: string}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTracksTrackId>>, TError,{trackId: string}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTracksTrackId>>, {trackId: string}> = (props) => {
          const {trackId} = props ?? {};

          return  deleteTracksTrackId(trackId,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteTracksTrackIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTracksTrackId>>>
    
    export type DeleteTracksTrackIdMutationError = ErrorType<unknown>

    /**
 * @summary Delete a track by ID
 */
export const useDeleteTracksTrackId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTracksTrackId>>, TError,{trackId: string}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getDeleteTracksTrackIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a list of all projects
 */
export const getProjects = (
    
 options?: SecondParameter<typeof customClient>,signal?: AbortSignal
) => {
      
      
      return customClient<Project[]>(
      {url: `/projects`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProjectsQueryKey = () => {
    return [`/projects`] as const;
    }

    
export const getGetProjectsQueryOptions = <TData = Awaited<ReturnType<typeof getProjects>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData>>, request?: SecondParameter<typeof customClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjects>>> = ({ signal }) => getProjects(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectsQueryResult = NonNullable<Awaited<ReturnType<typeof getProjects>>>
export type GetProjectsQueryError = ErrorType<void>

/**
 * @summary Get a list of all projects
 */
export const useGetProjects = <TData = Awaited<ReturnType<typeof getProjects>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData>>, request?: SecondParameter<typeof customClient>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProjectsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new project
 */
export const postProjects = (
    project: BodyType<Project>,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<Project>(
      {url: `/projects`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: project
    },
      options);
    }
  


export const getPostProjectsMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjects>>, TError,{data: BodyType<Project>}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof postProjects>>, TError,{data: BodyType<Project>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjects>>, {data: BodyType<Project>}> = (props) => {
          const {data} = props ?? {};

          return  postProjects(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostProjectsMutationResult = NonNullable<Awaited<ReturnType<typeof postProjects>>>
    export type PostProjectsMutationBody = BodyType<Project>
    export type PostProjectsMutationError = ErrorType<void>

    /**
 * @summary Create a new project
 */
export const usePostProjects = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjects>>, TError,{data: BodyType<Project>}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getPostProjectsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a project by ID
 */
export const getProjectsProjectId = (
    projectId: string,
 options?: SecondParameter<typeof customClient>,signal?: AbortSignal
) => {
      
      
      return customClient<Project>(
      {url: `/projects/${projectId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProjectsProjectIdQueryKey = (projectId: string,) => {
    return [`/projects/${projectId}`] as const;
    }

    
export const getGetProjectsProjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getProjectsProjectId>>, TError = ErrorType<void>>(projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectsProjectId>>, TError, TData>>, request?: SecondParameter<typeof customClient>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectsProjectIdQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectsProjectId>>> = ({ signal }) => getProjectsProjectId(projectId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectsProjectId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectsProjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectsProjectId>>>
export type GetProjectsProjectIdQueryError = ErrorType<void>

/**
 * @summary Get a project by ID
 */
export const useGetProjectsProjectId = <TData = Awaited<ReturnType<typeof getProjectsProjectId>>, TError = ErrorType<void>>(
 projectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectsProjectId>>, TError, TData>>, request?: SecondParameter<typeof customClient>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProjectsProjectIdQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a project by ID
 */
export const putProjectsProjectId = (
    projectId: string,
    project: BodyType<Project>,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<Project>(
      {url: `/projects/${projectId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: project
    },
      options);
    }
  


export const getPutProjectsProjectIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProjectsProjectId>>, TError,{projectId: string;data: BodyType<Project>}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof putProjectsProjectId>>, TError,{projectId: string;data: BodyType<Project>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProjectsProjectId>>, {projectId: string;data: BodyType<Project>}> = (props) => {
          const {projectId,data} = props ?? {};

          return  putProjectsProjectId(projectId,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutProjectsProjectIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProjectsProjectId>>>
    export type PutProjectsProjectIdMutationBody = BodyType<Project>
    export type PutProjectsProjectIdMutationError = ErrorType<void>

    /**
 * @summary Update a project by ID
 */
export const usePutProjectsProjectId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProjectsProjectId>>, TError,{projectId: string;data: BodyType<Project>}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getPutProjectsProjectIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a project by ID
 */
export const deleteProjectsProjectId = (
    projectId: string,
 options?: SecondParameter<typeof customClient>,) => {
      
      
      return customClient<void>(
      {url: `/projects/${projectId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteProjectsProjectIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProjectsProjectId>>, TError,{projectId: string}, TContext>, request?: SecondParameter<typeof customClient>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProjectsProjectId>>, TError,{projectId: string}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProjectsProjectId>>, {projectId: string}> = (props) => {
          const {projectId} = props ?? {};

          return  deleteProjectsProjectId(projectId,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteProjectsProjectIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProjectsProjectId>>>
    
    export type DeleteProjectsProjectIdMutationError = ErrorType<unknown>

    /**
 * @summary Delete a project by ID
 */
export const useDeleteProjectsProjectId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProjectsProjectId>>, TError,{projectId: string}, TContext>, request?: SecondParameter<typeof customClient>}
) => {

      const mutationOptions = getDeleteProjectsProjectIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
