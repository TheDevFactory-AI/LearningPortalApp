openapi: 3.0.3
info:
  title: BackendEntryPoint
  description: API for managing users, tracks, and projects for a code evaluation platform.
  version: "1.0.0"
servers:
  - url: https://api.example.com/v1 #need to attach actual server address
    description: Production server

paths:
  /users:
    get:
      summary: Get a list of all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A JSON array of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '401':
          description: Unauthorized - Authentication is required and has failed or has not yet been provided.
        '403':
          description: Forbidden - The server understood the request but refuses to authorize it.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
        '503':
          description: Service Unavailable - The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                [
                  {
                    "sub": "user-123",
                    "github_ID": "github123",
                    "email": "user123@example.com",
                    "profile": { "additionalProperty1": "value1" }
                  },
                  {
                    "sub": "user-456",
                    "github_ID": "github456",
                    "email": "user456@example.com",
                    "profile": { "additionalProperty2": "value2" }
                  },
                  {
                    "sub": "user-789",
                    "github_ID": "github789",
                    "email": "user789@example.com",
                    "profile": { "additionalProperty3": "value3" }
                  },
                  {
                    "sub": "user-101",
                    "github_ID": "github101",
                    "email": "user101@example.com",
                    "profile": { "additionalProperty4": "value4" }
                  },
                  {
                    "sub": "user-102",
                    "github_ID": "github102",
                    "email": "user102@example.com",
                    "profile": { "additionalProperty5": "value5" }
                  }
                ]
        passthroughBehavior: "when_no_match"
    post:
      summary: Create a new user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '401':
          description: Unauthorized - Authentication is required and has failed or has not yet been provided.
        '403':
          description: Forbidden - The server understood the request but refuses to authorize it.
        '422':
          description: Unprocessable Entity - The server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 201
            }
        responses:
          default:
            statusCode: "201"
            responseTemplates:
              application/json: |
                {
                  "message": "User created successfully."
                }
        passthroughBehavior: "when_no_templates"


  /users/{userId}:
    get:
      summary: Get a user by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '404':
          description: Not Found - The user with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  "sub": "user-456",
                  "github_ID": "github456",
                  "email": "user456@example.com",
                  "profile": { "additionalProperty2": "value2" }
                },
        passthroughBehavior: "when_no_templates"
    put:
      summary: Update a user by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully.
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '404':
          description: Not Found - The user with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                {
                  "message": "User updated successfully."
                }
        passthroughBehavior: "when_no_templates"
    delete:
      summary: Delete a user by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '404':
          description: Not Found - The user with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 204
            }
        responses:
          default:
            statusCode: "204"
            responseTemplates:
              application/json: |
                {
                  "message": "User deleted successfully."
                }
        passthroughBehavior: "when_no_templates"

  /tracks:
    get:
      summary: Get a list of all tracks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A JSON array of track objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TracksResponse'
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  "sub": "subscription-id",
                  "tracks": [
                    {
                      "trackId": "track-001",
                      "trackDescription": "Introduction to Programming",
                      "trackName": "Beginner Programming",
                      "trackProgression": [
                        {
                          "stepName": "Setup",
                          "stepDescription": "Setting up the development environment",
                          "stepStatus": "Completed",
                          "projects": ["proj-101", "proj-102"]
                        }
                      ]
                    },
                    {
                      "trackId": "track-002",
                      "trackDescription": "Intermediate Python",
                      "trackName": "Python Mastery",
                      "trackProgression": [
                        {
                          "stepName": "Data Types",
                          "stepDescription": "Understanding various data types in Python",
                          "stepStatus": "In Progress",
                          "projects": ["proj-201"]
                        }
                      ]
                    },
                    {
                      "trackId": "track-003",
                      "trackDescription": "Advanced Web Development",
                      "trackName": "Full Stack Developer",
                      "trackProgression": [
                        {
                          "stepName": "Frontend Frameworks",
                          "stepDescription": "Learning React and Vue",
                          "stepStatus": "Not Started",
                          "projects": ["proj-301", "proj-302", "proj-303"]
                        }
                      ]
                    },
                    {
                      "trackId": "track-004",
                      "trackDescription": "Data Science Fundamentals",
                      "trackName": "Data Science 101",
                      "trackProgression": [
                        {
                          "stepName": "Statistical Analysis",
                          "stepDescription": "Basics of statistical analysis for data science",
                          "stepStatus": "Completed",
                          "projects": ["proj-401"]
                        }
                      ]
                    },
                    {
                      "trackId": "track-005",
                      "trackDescription": "Cloud Computing with AWS",
                      "trackName": "Cloud Mastery",
                      "trackProgression": [
                        {
                          "stepName": "Cloud Basics",
                          "stepDescription": "Understanding the fundamentals of cloud computing",
                          "stepStatus": "In Progress",
                          "projects": ["proj-501", "proj-502"]
                        }
                      ]
                    }
                  ]
                }
        passthroughBehavior: "when_no_templates"
    post:
      summary: Create a new track
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TracksResponse'
      responses:
        '201':
          description: Track created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TracksResponse'
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 201
            }
        responses:
          default:
            statusCode: "201"
            responseTemplates:
              application/json: |
                {
                  "message": "Track created successfully."
                }
        passthroughBehavior: "when_no_templates"

  /tracks/{trackId}:
    get:
      summary: Get a track by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: trackId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Track retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        '404':
          description: Not Found - The track with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  "trackId": "track-001",
                  "trackDescription": "Introduction to Programming",
                  "trackName": "Beginner Programming",
                  "trackProgression": [
                    {
                      "stepName": "Setup",
                      "stepDescription": "Setting up the development environment",
                      "stepStatus": "Completed",
                      "projects": ["proj-101", "proj-102"]
                    }
                  ]
                }
        passthroughBehavior: "when_no_templates"
    put:
      summary: Update a track by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: trackId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TracksResponse'
      responses:
        '200':
          description: Track updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TracksResponse'
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '404':
          description: Not Found - The track with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                {
                  "message": "Track updated successfully."
                }
        passthroughBehavior: "when_no_templates"
    delete:
      summary: Delete a track by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: trackId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Track deleted successfully
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '404':
          description: Not Found - The track with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 204
            }
        responses:
          default:
            statusCode: "204"
            responseTemplates:
              application/json: |
                {
                  "message": "Tracks deleted successfully."
                }
        passthroughBehavior: "when_no_templates"

  /projects:
    get:
      summary: Get a list of all projects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A JSON array of project objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsResponse'
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '401':
          description: Unauthorized - Authentication is required and has failed or has not yet been provided.
        '403':
          description: Forbidden - The server understood the request but refuses to authorize it.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
        '503':
          description: Service Unavailable - The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  "sub": "12345",
                  "projects": [
                    { 
                      "projectName": "Backend with NodeJS",
                      "projectID": "proj-001",
                      "repo_address": "https://github.com/exampleOrg/project-one",
                      "projectDescription": "An open-source project focused on data visualization.",
                      "results": {
                        "result_title": "Code Quality Metrics",
                        "metrics": [
                          {
                            "metricName": "Coverage",
                            "metricValue": "90%"
                          },
                          {
                            "metricName": "Bugs",
                            "metricValue": "0"
                          }
                        ]
                      }
                    },
                    { 
                      "projectName": "React Web App",
                      "projectID": "proj-002",
                      "repo_address": "https://github.com/exampleOrg/project-two",
                      "projectDescription": "A REST API service for task management.",
                      "results": {
                        "result_title": "Performance Metrics",
                        "metrics": [
                          {
                            "metricName": "Latency",
                            "metricValue": "50ms"
                          },
                          {
                            "metricName": "Throughput",
                            "metricValue": "1000rps"
                          }
                        ]
                      }
                    },
                    {
                      "projectName": "IaC with Terraform",
                      "projectID": "proj-003",
                      "repo_address": "https://github.com/exampleOrg/project-three",
                      "projectDescription": "A blockchain-based smart contract system.",
                      "results": {
                        "result_title": "Security Audit",
                        "metrics": [
                          {
                            "metricName": "Vulnerabilities",
                            "metricValue": "0"
                          },
                          {
                            "metricName": "Security Score",
                            "metricValue": "A+"
                          }
                        ]
                      }
                    },
                    {
                      "projectName": "CICD with Jenkins",
                      "projectID": "proj-004",
                      "repo_address": "https://github.com/exampleOrg/project-four",
                      "projectDescription": "Mobile app for real-time communication.",
                      "results": {
                        "result_title": "User Testing Feedback",
                        "metrics": [
                          {
                            "metricName": "User Satisfaction",
                            "metricValue": "95%"
                          },
                          {
                            "metricName": "App Crashes",
                            "metricValue": "1 per 1000 sessions"
                          }
                        ]
                      }
                    },
                    {
                      "projectName": "Contenarization",
                      "projectID": "proj-005",
                      "repo_address": "https://github.com/exampleOrg/project-five",
                      "projectDescription": "Machine learning model for image recognition.",
                      "results": {
                        "result_title": "Model Accuracy",
                        "metrics": [
                          {
                            "metricName": "Accuracy",
                            "metricValue": "92%"
                          },
                          {
                            "metricName": "False Positives",
                            "metricValue": "2%"
                          }
                        ]
                      }
                    }
                  ]
                }
        passthroughBehavior: "when_no_templates"
    post:
      summary: Create a new project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsResponse'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsResponse'
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '401':
          description: Unauthorized - Authentication is required and has failed or has not yet been provided.
        '403':
          description: Forbidden - The server understood the request but refuses to authorize it.
        '422':
          description: Unprocessable Entity - The server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 201
            }
        responses:
          default:
            statusCode: "201"
            responseTemplates:
              application/json: |
                {
                  "message": "Project created successfully."
                }
        passthroughBehavior: "when_no_templates"

  /projects/{projectId}:
    get:
      summary: Get a project by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '404':
          description: Not Found - The project with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  "projectName": "Backend with NodeJS"
                  "projectID": "proj-1",
                  "repo_address": "https://github.com/example/proj1",
                  "projectDescription": "First project description",
                  "results": [
                    {
                      "result_title": "Initial Test Coverage",
                      "metrics": [
                        { "metricName": "Coverage", "metricValue": 85 },
                        { "metricName": "Branches", "metricValue": 70 }
                      ]
                    },
                    {
                      "result_title": "Code Quality Review",
                      "metrics": [
                        { "metricName": "Maintainability", "metricValue": 95 },
                        { "metricName": "Technical Debt", "metricValue": 5 }
                      ]
                    }
                  ]
                }
        passthroughBehavior: "when_no_templates"
    put:
      summary: Update a project by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsResponse'
      responses:
        '200':
          description: Project updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsResponse'
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '404':
          description: Not Found - The project with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                {
                  "message": "Project updated successfully."
                }
        passthroughBehavior: "when_no_templates"
    delete:
      summary: Delete a project by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project deleted successfully.
        '400':
          description: Bad Request - The request was invalid or missing parameters.
        '404':
          description: Not Found - The project with the specified ID was not found.
        '500':
          description: Internal Server Error - An unexpected condition was encountered.
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 204
            }
        responses:
          default:
            statusCode: "204"
            responseTemplates:
              application/json: |
                {
                  "message": "Project deleted successfully."
                }
        passthroughBehavior: "when_no_templates"


components:
  schemas:
    User:
      type: object
      required:
        - sub
        - email
      properties:
        sub:
          type: string
          description: Unique identifier for the user assigned by Cognito
        github_ID:
          type: string
          description: GitHub identifier associated with the user
        email:
          type: string
          description: Email address of the user
        profile:
          type: object
          additionalProperties: true
          description: A JSON object containing user profile details

    #Types and sub-types for project microservice
    ProjectsResponse:
      type: "object"
      required:
        - sub
        - projects
      properties:
        sub:
          type: "string"
          description: Unique identifier for the user assigned by Cognito
        projects:
          type: "array"
          items:
            $ref: "#/components/schemas/Project"
    Project:
      type: "object"
      required:
        - projectName
        - projectID
        - repo_address
        - projectDescription
        - results
      properties:
        projectName:
          type: "string"
        projectID:
          type: "string"
        repo_address:
          type: "string"
        projectDescription:
          type: "string"
        results:
          $ref: "#/components/schemas/Results"
    Results:
      type: "object"
      properties:
        result_title:
          type: "string"
        metrics:
          type: "array"
          items:
            $ref: "#/components/schemas/Metric"
    Metric:
      type: "object"
      required:
        - metricName
        - metricValue
      properties:
        metricName:
          type: "string"
        metricValue:
          type: "string"

  #types and subtypes for the track microservice
    TracksResponse:
      type: "object"
      properties:
        sub:
          type: "string"
        tracks:
          type: "array"
          items:
            $ref: "#/components/schemas/Track"
    Track:
      type: "object"
      required:
        - trackId
        - trackDescription
        - trackName
        - trackProgression
      properties:
        trackId:
          type: "string"
        trackDescription:
          type: "string"
        trackName:
          type: "string"
        trackProgression:
          type: "array"
          items:
            $ref: "#/components/schemas/TrackProgression"
    TrackProgression:
      type: "object"
      required:
        - stepName
        - stepDescription
        - stepStatus
        - projects
      properties:
        stepName:
          type: "string"
        stepDescription:
          type: "string"
        stepStatus:
          type: "string" # This could be an enum if there are only specific statuses allowed
        projects:
          type: "array"
          items:
            type: "string" # Assuming projectIds are strings; could be integers or another type if needed


  securitySchemes:
    BearerAuth:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - "arn:aws:cognito-idp:us-east-1:426691418260:userpool/us-east-1_RO71EiBnE"
